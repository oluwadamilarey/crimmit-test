// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.27.3
// source: proto/product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product";

export interface GetProductRequest {
  id: string;
}

export interface UpdateProductPriceRequest {
  id: string;
  price: number;
}

export interface Product {
  id: string;
  name: string;
  price: number;
  description: string;
  ownerId: string;
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  getProduct(request: GetProductRequest): Observable<Product>;

  updateProductPrice(request: UpdateProductPriceRequest): Observable<Product>;
}

export interface ProductServiceController {
  getProduct(
    request: GetProductRequest
  ): Promise<Product> | Observable<Product> | Product;

  updateProductPrice(
    request: UpdateProductPriceRequest
  ): Promise<Product> | Observable<Product> | Product;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getProduct", "updateProductPrice"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      );
      GrpcMethod("ProductService", method)(
        constructor.prototype[method],
        method,
        descriptor
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      );
      GrpcStreamMethod("ProductService", method)(
        constructor.prototype[method],
        method,
        descriptor
      );
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
